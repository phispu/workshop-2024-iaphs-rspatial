[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop: An Interactive Introduction to R Spatial Packages: Incorporating Historic Sociodemographic Data from the US Census and Population Life Expectancy in Static and Animated Maps",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "code/1-Tidyverse Primer.html",
    "href": "code/1-Tidyverse Primer.html",
    "title": "1  Primer to the Tutorial",
    "section": "",
    "text": "1.1 Quarto Markdown\nThis tutorial is written in Quarto Markdown (.qmd files), a powerful tool for creating reproducible documents that combine text, code, and output. By preparing this tutorial in Quarto, I can provide you with HTML/PDF files to reference later while also providing you with the R code with explanations to run on your own device. In a Quarto Markdown file:\nHere is where you can find text explaining the code. Below is an example of a code chunk (surrounded by the three backticks). Code chunks will often have a few lines in the beginning with #| that specify options for the code chunk. For example:\nprint(\"This is a written in code chunk. Running this will produce an output.\")\n\n[1] \"This is a written in code chunk. Running this will produce an output.\"\nIn this tutorial, you do not need to worry about the code chunk options. I recommend following along primarily in these .qmd files and reference the HTML files if you’d like to reference polished output.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Primer to the Tutorial</span>"
    ]
  },
  {
    "objectID": "code/1-Tidyverse Primer.html#quarto-markdown",
    "href": "code/1-Tidyverse Primer.html#quarto-markdown",
    "title": "1  Primer to the Tutorial",
    "section": "",
    "text": "#| label: Here is a Label for the Code Chunk will provide a label for the code chunk that can be referenced later.\n#| eval: true will run the code chunk when the document is rendered.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Primer to the Tutorial</span>"
    ]
  },
  {
    "objectID": "code/1-Tidyverse Primer.html#installing-and-loading-packages",
    "href": "code/1-Tidyverse Primer.html#installing-and-loading-packages",
    "title": "1  Primer to the Tutorial",
    "section": "1.2 Installing and Loading Packages",
    "text": "1.2 Installing and Loading Packages\nFirst, please install the pacman package. We will use this package to install and load the packages needed for this workshop.\n\ninstall.packages(\"pacman\")\n\nInstall and load the tidyverse package using pacman::p_load() function.\n\nlibrary(pacman)\n\nWarning: package 'pacman' was built under R version 4.2.3\n\npacman::p_load(\n  tidyverse\n)\n\n\n1.2.1 Alternative Method\nRemember, you can always use the install.packages() function if pacman::p_load() does not work for you.\n\ninstall.packages(\"tidycensus\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Primer to the Tutorial</span>"
    ]
  },
  {
    "objectID": "code/1-Tidyverse Primer.html#tutorial-syntax",
    "href": "code/1-Tidyverse Primer.html#tutorial-syntax",
    "title": "1  Primer to the Tutorial",
    "section": "1.3 Tutorial Syntax",
    "text": "1.3 Tutorial Syntax\n\n1.3.1 The Double Colon Operator (::)\nWhen referring to a function from a non-base R package, we will generally use the double colon operator (::) to specify the source package of the function. This will help with learning functions from the various packages we will use today and avoiding errors when using functions with the same name from different packages.\nFor example, tibble::as_tibble() refers to the as_tibble() function from the tibble package. This function is used to coerce a data frame to a tibble, which is a modern version of a data frame with better usability and readability.\n\ndata(iris) # This loads the iris dataset from base R\n\ntibble::as_tibble(iris)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\n\n1.3.2 The Pipe Operator (|&gt;)\nIn this tutorial, we will use pipes (|&gt;) to clearly express sequences of steps. This is similar to the magrittr pipe (%&gt;%) that you may have seen before. Piping allows us to read the code from top to bottom rather than inside out.\n\n# Without pipes\ntibble::as_tibble(iris)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n# With pipes\niris |&gt; \n  tibble::as_tibble()\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\nIn a longer example, it is a bit easier to read the code when using pipes.\n\n# Without pipes\nmean(dplyr::filter(tibble::as_tibble(iris), Species == 'virginica')$Petal.Length)\n\n[1] 5.552\n\n# With pipes\niris |&gt; \n  as_tibble() |&gt; \n  dplyr::filter(Species == 'virginica') |&gt; \n  dplyr::summarize(mean_pl = mean(Petal.Length))\n\n# A tibble: 1 × 1\n  mean_pl\n    &lt;dbl&gt;\n1    5.55",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Primer to the Tutorial</span>"
    ]
  },
  {
    "objectID": "code/1-Tidyverse Primer.html#tidyverse",
    "href": "code/1-Tidyverse Primer.html#tidyverse",
    "title": "1  Primer to the Tutorial",
    "section": "1.4 Tidyverse",
    "text": "1.4 Tidyverse\nIn this tutorial, we will use tidyverse, which is a collection of R packages that includes functions data wrangling and visualization. The packages in the tidyverse share an underlying design philosophy, grammar, and data structures.\n\n1.4.1 Coercing a Data Frame to a Tibble\nAs mentioned above, the tibble::as_tibble() is used to coerce a data frame to a tibble, which is a modern version of a data frame with better usability and readability. For example, tibbles print only the first 10 rows and all the columns that fit on the screen by default.\n\niris &lt;- iris |&gt; \n  tibble::as_tibble()\n\n\n\n1.4.2 Selecting Columns\nThe dplyr::select() function is used to select columns from a data frame. Below, we select the columns Species, Petal.Length, and Petal.Width from the iris dataset.\n\niris |&gt; \n  dplyr::select(Species, Petal.Length, Petal.Width)\n\n# A tibble: 150 × 3\n   Species Petal.Length Petal.Width\n   &lt;fct&gt;          &lt;dbl&gt;       &lt;dbl&gt;\n 1 setosa           1.4         0.2\n 2 setosa           1.4         0.2\n 3 setosa           1.3         0.2\n 4 setosa           1.5         0.2\n 5 setosa           1.4         0.2\n 6 setosa           1.7         0.4\n 7 setosa           1.4         0.3\n 8 setosa           1.5         0.2\n 9 setosa           1.4         0.2\n10 setosa           1.5         0.1\n# ℹ 140 more rows\n\n\n\n\n1.4.3 Filtering Rows\nThe dplyr::filter() is used to filter rows in a data frame based on a condition. Below, we filter the iris dataset to only include rows where Species is equal to virginica.\n\niris |&gt; \n  dplyr::filter(Species == 'virginica')\n\n# A tibble: 50 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;    \n 1          6.3         3.3          6           2.5 virginica\n 2          5.8         2.7          5.1         1.9 virginica\n 3          7.1         3            5.9         2.1 virginica\n 4          6.3         2.9          5.6         1.8 virginica\n 5          6.5         3            5.8         2.2 virginica\n 6          7.6         3            6.6         2.1 virginica\n 7          4.9         2.5          4.5         1.7 virginica\n 8          7.3         2.9          6.3         1.8 virginica\n 9          6.7         2.5          5.8         1.8 virginica\n10          7.2         3.6          6.1         2.5 virginica\n# ℹ 40 more rows\n\n\n\n\n1.4.4 Mutating Columns\nThe dplyr::mutate() function is used to create new columns or modify existing columns in a data frame. Below, we create a new column called petal_ratio by dividing Petal.Length by Petal.Width.\n\niris |&gt; \n  dplyr::mutate(petal_ratio = Petal.Length / Petal.Width)\n\n# A tibble: 150 × 6\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species petal_ratio\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n 1          5.1         3.5          1.4         0.2 setosa         7   \n 2          4.9         3            1.4         0.2 setosa         7   \n 3          4.7         3.2          1.3         0.2 setosa         6.5 \n 4          4.6         3.1          1.5         0.2 setosa         7.5 \n 5          5           3.6          1.4         0.2 setosa         7   \n 6          5.4         3.9          1.7         0.4 setosa         4.25\n 7          4.6         3.4          1.4         0.3 setosa         4.67\n 8          5           3.4          1.5         0.2 setosa         7.5 \n 9          4.4         2.9          1.4         0.2 setosa         7   \n10          4.9         3.1          1.5         0.1 setosa        15   \n# ℹ 140 more rows\n\n\n\n\n1.4.5 Summarizing Data by Groups\nThe dplyr::group_by() function is used to group the data, and the dplyr::summarize() is used to calculate summary statistics by group. Below, we calculate the mean Petal.Length and Petal.Width (summary statistics) for each Species (group) in the iris dataset.\n\niris |&gt; \n  dplyr::group_by(Species) |&gt; \n  dplyr::summarize(\n    mean_petal_length = mean(Petal.Length),\n    mean_petal_width = mean(Petal.Width)\n  )\n\n# A tibble: 3 × 3\n  Species    mean_petal_length mean_petal_width\n  &lt;fct&gt;                  &lt;dbl&gt;            &lt;dbl&gt;\n1 setosa                  1.46            0.246\n2 versicolor              4.26            1.33 \n3 virginica               5.55            2.03 \n\n\n\n\n1.4.6 Creating a Long Dataset\nWe use the tidyr::pivot_longer() function to create a long data frame, which tends to be easier to work with when using tidyverse packages including ggplot2.\n\nA long dataset, also known as a “tidy” dataset, is structured so that each row represents a single observation, with one column for each variable and an additional column for the values. This format is often used for time series or repeated measures data.\nIn contrast, a wide dataset has a format where each row represents a single subject or entity, with multiple columns for different measurements or observations taken at different times or under different conditions. This format is common in datasets where comparisons across different time points or conditions are needed.\nBelow, we combine the Petal.Length and Petal.Width columns. The names (i.e., “Petal.Length” and “Petal.Width”) are stored in a new column called Petal_Feature, and the values are stored in a new column called value.\n\n\niris |&gt; \n  tidyr::pivot_longer(cols = c(Petal.Length, Petal.Width),\n                      names_to = 'Petal_Feature',\n                      values_to = 'value') \n\n# A tibble: 300 × 5\n   Sepal.Length Sepal.Width Species Petal_Feature value\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt;         &lt;dbl&gt;\n 1          5.1         3.5 setosa  Petal.Length    1.4\n 2          5.1         3.5 setosa  Petal.Width     0.2\n 3          4.9         3   setosa  Petal.Length    1.4\n 4          4.9         3   setosa  Petal.Width     0.2\n 5          4.7         3.2 setosa  Petal.Length    1.3\n 6          4.7         3.2 setosa  Petal.Width     0.2\n 7          4.6         3.1 setosa  Petal.Length    1.5\n 8          4.6         3.1 setosa  Petal.Width     0.2\n 9          5           3.6 setosa  Petal.Length    1.4\n10          5           3.6 setosa  Petal.Width     0.2\n# ℹ 290 more rows\n\n\n\n\n1.4.7 Plotting Data\nThe ggplot2 package is used for data visualization in the tidyverse. The ggplot() function initializes a ggplot2 object, the aes() function creates aesthetic mappings (e.g., x-axis and y-axis variables), and the geom_point() function creates a scatter plot.\n\nTake note that the different ggplot2 layers are connected with the + operator.\nGenerally, we won’t use the double colon (::) operator with ggplot2 often since the functions are usually uniquely named and to avoid verbose code (ggplot2 plots can contain a lot of layers).\n\nBelow, we create a scatter plot of Petal.Length and Petal.Width for the iris dataset.\n\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +\n  geom_point()\n\n\n\n\n\n\n\n\nYou can use the pipe operator |&gt; to connect the iris dataset to ggplot2() function to initialize the ggplot2 object.\n\niris |&gt; \n  ggplot(aes(x = Petal.Length, y = Petal.Width)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThe facet_grid() function creates a matrix of subplots by faceting variables. Below, we create a scatter plot with facets by Species.\n\niris |&gt; \n  ggplot(aes(x = Petal.Length, y = Petal.Width)) +\n  geom_point() +\n  facet_grid(. ~ Species)\n\n\n\n\n\n\n\n\nAlternatively, we can use the facet_wrap() function if we’d like to specify the number of rows or columns. Below, we create a scatter plot with facets by Species.\n\nTake note that we need to wrap the variable name in the vars() function.\n\n\niris |&gt; \n  ggplot(aes(x = Petal.Length, y = Petal.Width)) +\n  geom_point() +\n  facet_wrap(vars(Species), nrow = 2)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Primer to the Tutorial</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1 Setup",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#setup",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#setup",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1.1 Install and Load Packages\nInstall and load the following packages by using the pacman::p_load() function. These packages give us functions to help with the following:\n\npacman: helps streamline installing and loading packages\ntidycensus: importing Census data\nsf: working with and mapping spatial data\nsfdep: provides operations for spatial dependence and clustering\nsfarrow: reading and writing spatial data\nggspatial: mapping north arrow and scale bar\ncartogram: creating cartograms\ntidyverse: data wrangling\nusethis: helps us set up the API key\nreadr: importing CSV files\npatchwork: combining multiple maps\ngganimate: creating animated maps\n\n\nlibrary(pacman)\n\nWarning: package 'pacman' was built under R version 4.2.3\n\npacman::p_load(\n  # Spatial packages\n  tidycensus,\n  sf,\n  sfdep,\n  sfarrow,\n  ggspatial,\n  cartogram,\n  # Data importing, wrangling, and plotting packages\n  tidyverse,\n  usethis,\n  readr,\n  patchwork,\n  gganimate\n)\n\n\n\n2.1.2 Obtain and Load Census API Key\nIn order to use the tidycensus package, we will need to obtain and load a Census API key.\n\nObtain a Census API key here.\nRun the edit_r_envion() function from the usethis package. The .Renviron file should open.\n\n\nusethis::edit_r_environ()\n\n• Edit 'C:/Users/steph/OneDrive/Documents/.Renviron'\n• Restart R for changes to take effect\n\n\n\nFollow these steps to add your set up your Census API key:\n\n\nCopy and paste the following line into the .Renviron file.\nAdd your Census API key after the = sign.\nSave the .Renviron file.\n\n\nAPIKEY_CENSUS=\n\n\nRestart your R session so you can access your API key by clicking on the Session tab in the top menu and selecting Restart R.\nRun the following code to load your Census API key, using the tidycensus::census_api_key() function.\n\n\ntidycensus::census_api_key(Sys.getenv(\"APIKEY_CENSUS\"))\n\nTo install your API key for use in future sessions, run this function with `install = TRUE`.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#identifying-census-variable-names",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#identifying-census-variable-names",
    "title": "2  Introduction",
    "section": "2.2 Identifying Census Variable Names",
    "text": "2.2 Identifying Census Variable Names\n\n2.2.1 Method 1\nYou can get a list of variable names and descriptions from the U.S. Census using the load_variables() function from the tidycensus package with the following arguments:\n\nyear = 2015: Obtains data for 2015\ndataset = \"acs5\": Obtains the American Community Survey (ACS) data. We are using the ACS data since the Decennial Census data unavailable for 2015.\ncache = TRUE: Caches the data so it runs faster next time it is run.\n\nSince we are interested in the year 2015, let’s use the American Community Survey (vs. the Decennial Census data). We will use the 5-year ACS estimates and filter to variables that are available at the Census tract level.\n\nvarlookup_2015 &lt;- tidycensus::load_variables(\n    year = 2015, \n    dataset = \"acs5\", \n    cache = TRUE)\n\nvarlookup_2015 |&gt; head()\n\n# A tibble: 6 × 4\n  name        label                                concept             geography\n  &lt;chr&gt;       &lt;chr&gt;                                &lt;chr&gt;               &lt;chr&gt;    \n1 B00001_001  Estimate!!Total                      UNWEIGHTED SAMPLE … block gr…\n2 B00002_001  Estimate!!Total                      UNWEIGHTED SAMPLE … block gr…\n3 B01001A_001 Estimate!!Total                      SEX BY AGE (WHITE … tract    \n4 B01001A_002 Estimate!!Total!!Male                SEX BY AGE (WHITE … tract    \n5 B01001A_003 Estimate!!Total!!Male!!Under 5 years SEX BY AGE (WHITE … tract    \n6 B01001A_004 Estimate!!Total!!Male!!5 to 9 years  SEX BY AGE (WHITE … tract    \n\n\nWe can see that tidycensus::load_variables() gave us variables across different geographies. Let’s filter to only tract-level variables.\n\nvarlookup_2015_tract &lt;- varlookup_2015 |&gt; \n  dplyr::filter(geography == \"tract\")\n\nvarlookup_2015_tract |&gt; head()\n\n# A tibble: 6 × 4\n  name        label                                 concept            geography\n  &lt;chr&gt;       &lt;chr&gt;                                 &lt;chr&gt;              &lt;chr&gt;    \n1 B01001A_001 Estimate!!Total                       SEX BY AGE (WHITE… tract    \n2 B01001A_002 Estimate!!Total!!Male                 SEX BY AGE (WHITE… tract    \n3 B01001A_003 Estimate!!Total!!Male!!Under 5 years  SEX BY AGE (WHITE… tract    \n4 B01001A_004 Estimate!!Total!!Male!!5 to 9 years   SEX BY AGE (WHITE… tract    \n5 B01001A_005 Estimate!!Total!!Male!!10 to 14 years SEX BY AGE (WHITE… tract    \n6 B01001A_006 Estimate!!Total!!Male!!15 to 17 years SEX BY AGE (WHITE… tract    \n\n\nWe can see that the label and concept columns have variable information. The stingr::str_detect() function along with dplyr::filter() allows us to search text strings for key words. We can use it to find the variable names related to median household income and educational attainment.\n\nMedian household income: We can see that the variable B06011_001 is an estimate for the median household income for the total population\n\n\nvarlookup_2015_tract |&gt; \n  dplyr::filter(concept |&gt; stringr::str_detect(\"MEDIAN INCOME\"))\n\n# A tibble: 25 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B06011_001 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 2 B06011_002 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 3 B06011_003 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 4 B06011_004 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 5 B06011_005 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 6 B07011_001 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 7 B07011_002 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 8 B07011_003 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n 9 B07011_004 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n10 B07011_005 Estimate!!Median income in the past 12 months!!… MEDIAN… tract    \n# ℹ 15 more rows\n\n\n\nGini coefficient: We can see that the variable B19083_001 is an estimate for Gini index of income inequality.\n\n\nvarlookup_2015_tract |&gt; \n  dplyr::filter(concept |&gt; stringr::str_detect(\"GINI\"))\n\n# A tibble: 1 × 4\n  name       label                concept                         geography\n  &lt;chr&gt;      &lt;chr&gt;                &lt;chr&gt;                           &lt;chr&gt;    \n1 B19083_001 Estimate!!Gini Index GINI INDEX OF INCOME INEQUALITY tract    \n\n\n\nEducational attainment: We can see that the variables B06009_001, B06009_002, B06009_003, B06009_004, B06009_005 are estimates related to educational attainment (B06009_002 for less than high school, B06009_003 for high school graduate, B06009_003 for some college, B06009_004 for bachelor’s, and B06009_005 for graduate) for the total population.\n\n\nvarlookup_2015_tract |&gt; \n  dplyr::filter(concept |&gt; stringr::str_detect(\"EDUCATION\"))\n\n# A tibble: 471 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B06009_001 Estimate!!Total                                  PLACE … tract    \n 2 B06009_002 Estimate!!Total!!Less than high school graduate  PLACE … tract    \n 3 B06009_003 Estimate!!Total!!High school graduate (includes… PLACE … tract    \n 4 B06009_004 Estimate!!Total!!Some college or associate's de… PLACE … tract    \n 5 B06009_005 Estimate!!Total!!Bachelor's degree               PLACE … tract    \n 6 B06009_006 Estimate!!Total!!Graduate or professional degree PLACE … tract    \n 7 B06009_007 Estimate!!Total!!Born in state of residence      PLACE … tract    \n 8 B06009_008 Estimate!!Total!!Born in state of residence!!Le… PLACE … tract    \n 9 B06009_009 Estimate!!Total!!Born in state of residence!!Hi… PLACE … tract    \n10 B06009_010 Estimate!!Total!!Born in state of residence!!So… PLACE … tract    \n# ℹ 461 more rows\n\n\n\nNativity: We can see that the variable B05002_013 is an estimate for those who were foreign-born (with the B05002_001 representing the total column).\n\n\nvarlookup_2015_tract |&gt; \n  dplyr::filter(concept |&gt; stringr::str_detect(\"NATIVITY\")) |&gt; print(n = 20)\n\n# A tibble: 534 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B05001_001 Estimate!!Total                                  NATIVI… tract    \n 2 B05001_002 Estimate!!Total!!U.S. citizen, born in the Unit… NATIVI… tract    \n 3 B05001_003 Estimate!!Total!!U.S. citizen, born in Puerto R… NATIVI… tract    \n 4 B05001_004 Estimate!!Total!!U.S. citizen, born abroad of A… NATIVI… tract    \n 5 B05001_005 Estimate!!Total!!U.S. citizen by naturalization  NATIVI… tract    \n 6 B05001_006 Estimate!!Total!!Not a U.S. citizen              NATIVI… tract    \n 7 B05002_001 Estimate!!Total                                  PLACE … tract    \n 8 B05002_002 Estimate!!Total!!Native                          PLACE … tract    \n 9 B05002_003 Estimate!!Total!!Native!!Born in state of resid… PLACE … tract    \n10 B05002_004 Estimate!!Total!!Native!!Born in other state in… PLACE … tract    \n11 B05002_005 Estimate!!Total!!Native!!Born in other state in… PLACE … tract    \n12 B05002_006 Estimate!!Total!!Native!!Born in other state in… PLACE … tract    \n13 B05002_007 Estimate!!Total!!Native!!Born in other state in… PLACE … tract    \n14 B05002_008 Estimate!!Total!!Native!!Born in other state in… PLACE … tract    \n15 B05002_009 Estimate!!Total!!Native!!Born outside the Unite… PLACE … tract    \n16 B05002_010 Estimate!!Total!!Native!!Born outside the Unite… PLACE … tract    \n17 B05002_011 Estimate!!Total!!Native!!Born outside the Unite… PLACE … tract    \n18 B05002_012 Estimate!!Total!!Native!!Born outside the Unite… PLACE … tract    \n19 B05002_013 Estimate!!Total!!Foreign born                    PLACE … tract    \n20 B05002_014 Estimate!!Total!!Foreign born!!Naturalized U.S.… PLACE … tract    \n# ℹ 514 more rows\n\n\n\n\n2.2.2 Method 2\nWe can also use the RStudio IDE to search the variables. The view() function opens up the varlist_2015_tract data frame containing the ACS variable descriptions in a new tab.\n\nvarlookup_2015_tract |&gt; view()\n\nIn the example below, we search for variables related to “income” by using the search bar on the top right hand side of the window.\n\n\n\nSearching for Income",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#importing-data",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#importing-data",
    "title": "2  Introduction",
    "section": "2.3 Importing Data",
    "text": "2.3 Importing Data\n\n2.3.1 Census Data\nWhen downloading the ACS data using the tidycensus::get_acs() function, we provide the following information with the arguments:\n\ngeography = \"tract\": Geography of interest/unit of analysis. In our example, we are downloading Census tract-level data. See a full list of available geographies here.\nvariables = vars_acs: Variables of interest. We first create a named vector called vars_acs to specify our variables of interest and rename them.\nstate = \"MO\": State of interest. In our example, we are downloading data for Missouri.\nyear = 2015: Year of interest. In our example, we are downloading data for 2015.\noutput = \"wide\": Output format. In our example, we are downloading wide data (as opposed to long data).\n\nLet’s use median income in the past 12 months (B06011_001), the Gini coefficient (B19083_001), and educational attainment (B06009_001, B06009_002, B06009_003, B06009_004, B06009_005).\n\n2.3.1.1 Tabular\n\nvars_acs &lt;- c(inc       = \"B06011_001\", # Median Household income\n              gini      = \"B19083_001\", # Gini coefficient\n              edu_tot   = \"B06009_001\", \n              edu_lths  = \"B06009_002\", # Less than High School Education\n              nat_tot   = \"B05002_001\",\n              nat_fb    = \"B05002_013\") # Foreign-born\n\nacs_mo2015_df_prelim &lt;- tidycensus::get_acs(\n  geography = \"tract\",\n  variables = vars_acs,\n  state = \"MO\",\n  year = 2015,\n  output = \"wide\")\n\nGetting data from the 2011-2015 5-year ACS\n\nacs_mo2015_df_prelim |&gt; head()\n\n# A tibble: 6 × 14\n  GEOID     NAME   incE  incM giniE  giniM edu_totE edu_totM edu_lthsE edu_lthsM\n  &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 29037060… Cens…    NA    NA 0.398 0.0258     2433      142       331        81\n2 29037060… Cens… 33774  4999 0.374 0.0309     2054      133       121        42\n3 29037061… Cens… 30768  5089 0.366 0.0404     3437      210       224        83\n4 29037060… Cens… 28875  5582 0.41  0.0393     4150      239       318       113\n5 29049960… Cens…    NA    NA 0.390 0.0299     2987      154       180        49\n6 29049960… Cens… 25516  2810 0.390 0.0338     3364      167       327       120\n# ℹ 4 more variables: nat_totE &lt;dbl&gt;, nat_totM &lt;dbl&gt;, nat_fbE &lt;dbl&gt;,\n#   nat_fbM &lt;dbl&gt;\n\n\nWith the class() function, we can see that we downloaded a data frame.\n\nacs_mo2015_df_prelim |&gt; class()\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n2.3.1.2 Spatial\nWe can use the geometry = TRUE argument in the tidycensus::get_acs() function to bring in the geometries. When viewing the object, you will notice a new geometry column.\n\nacs_mo2015_sf_prelim &lt;- tidycensus::get_acs(\n    geography = \"tract\",\n    variables = vars_acs,\n    state = \"MO\",\n    year = 2015,\n    output = \"wide\", \n    geometry = TRUE) # To also bring in geometries, add in the geometry = TRUE function\n\nGetting data from the 2011-2015 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |==============                                                        |  19%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |===================================================                   |  74%\n  |                                                                            \n  |====================================================================  |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nacs_mo2015_sf_prelim |&gt; head()\n\nSimple feature collection with 6 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -94.84814 ymin: 36.72229 xmax: -90.38268 ymax: 39.77524\nGeodetic CRS:  NAD83\n        GEOID                                       NAME  incE incM  giniE\n1 29009960300  Census Tract 9603, Barry County, Missouri 21530 5309 0.3787\n2 29019001300    Census Tract 13, Boone County, Missouri    NA   NA 0.5767\n3 29019002200    Census Tract 22, Boone County, Missouri    NA   NA 0.5741\n4 29021001000 Census Tract 10, Buchanan County, Missouri 15622 2008 0.4729\n5 29023950700 Census Tract 9507, Butler County, Missouri 13150 2843 0.4148\n6 29029950800 Census Tract 9508, Camden County, Missouri 19593 2061 0.4052\n   giniM edu_totE edu_totM edu_lthsE edu_lthsM nat_totE nat_totM nat_fbE\n1 0.0372     4012      229      1136       271     6050      150     845\n2 0.0919     2342      291       186       109     3720      345     623\n3 0.0570      529      133        24        17     7159      550     567\n4 0.0582     1732      226       367       154     3008      394     246\n5 0.0584     1739      224       537       136     2884      338      46\n6 0.0312     5571      475       927       274     7828      729      92\n  nat_fbM                       geometry\n1     256 MULTIPOLYGON (((-93.97282 3...\n2     272 MULTIPOLYGON (((-92.40965 3...\n3     168 MULTIPOLYGON (((-92.33384 3...\n4     174 MULTIPOLYGON (((-94.84814 3...\n5      45 MULTIPOLYGON (((-90.42229 3...\n6      93 MULTIPOLYGON (((-93.07184 3...\n\n\nWith the class() function, we can see that we downloaded a simple features (spatial) object.\n\nacs_mo2015_sf_prelim |&gt; class()\n\n[1] \"sf\"         \"data.frame\"\n\n\nLet’s download Census data for states for yeasr 2018, 2019, and 2020. For this repetitive task, let’s first create a function.\n\nget_acs_states &lt;- function(vars_acs, yr){\n  tidycensus::get_acs(geography = \"state\",\n      variables = vars_acs,\n      year = yr,\n      output = \"wide\", \n      cb = TRUE,\n      geometry = TRUE) |&gt; \n    dplyr::mutate(yr = yr)\n}\n\nLet’s use this function to download the data for the three years and concatenate them with the dplyr::bind_rows() function.\n\nacs_states2018_sf_prelim &lt;- get_acs_states(vars_acs = vars_acs, yr = 2018)\n\nGetting data from the 2014-2018 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nacs_states2019_sf_prelim &lt;- get_acs_states(vars_acs = vars_acs, yr = 2019)\n\nGetting data from the 2015-2019 5-year ACS\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |======================================================================|  99%\n  |                                                                            \n  |======================================================================| 100%\n\nacs_states2020_sf_prelim &lt;- get_acs_states(vars_acs = vars_acs, yr = 2020)\n\nGetting data from the 2016-2020 5-year ACS\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%\n\nacs_states_sf_prelim &lt;- dplyr::bind_rows(\n  acs_states2018_sf_prelim,\n  acs_states2019_sf_prelim,\n  acs_states2020_sf_prelim)\n\n\n\n\n2.3.2 Life Expectancy Data\nLife expectancy data has already downloaded as a CSV file.\n\nusaleep_prelim &lt;- readr::read_csv(\"data/usaleep_2015.csv\")\n\nRows: 67148 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (7): Tract ID, STATE2KX, CNTY2KX, TRACT2KX, e(0), se(e(0)), Abridged lif...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.3.3 Shapefiles\nUse the tigris::tracts() function to download the Census tract shapefiles for Missouri in 2015.\n\nThe cb = TRUE argument specifies that we want to download cartographic boundaries, which are simplified shapefiles (which maps faster, as opposed to full resolution shapefiles).\n\n\ntracts_mo2015_sf &lt;- tigris::tracts(year = 2015, \n                                   state = \"MO\", \n                                   cb = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#cleaning-data",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#cleaning-data",
    "title": "2  Introduction",
    "section": "2.4 Cleaning Data",
    "text": "2.4 Cleaning Data\n\n2.4.1 Census - Table\nLet’s convert the counts to proportions in the Census data. Take note that the columns corresponding to the estimate have the E suffix.\n\n\n2.4.2 Census - Spatial\nLet’s similarly clean the spatial Census data for states. For our example, we will remove the District of Columbia and Puerto Rico.\n\nacs_states_sf &lt;- acs_states_sf_prelim |&gt; \n  # Remove DC and PR\n  dplyr::filter(GEOID != \"11\" & GEOID != \"72\") |&gt; \n  # Clean variables\n  dplyr::transmute(\n    yr = yr,\n    GEOID = GEOID,\n    state = NAME,\n    inc = incE,\n    gini = giniE,\n    pct_lths = edu_lthsE/edu_totE,\n    pct_fb = nat_fbE/nat_totE)\n\nFor later mapping, use the tigris::shift_geometry() function so Hawaii and Alaska are mapped more closely to the contiguous US.\n\nacs_states_sf &lt;- acs_states_sf |&gt;\n  tigris::shift_geometry() \n\n\n\n2.4.3 Life Expectancy\nWhen looking at the life expectancy data, we see that the Tract ID column is the unique identifier for each Census tract and the e(0) column is the life expectancy. We will rename the columns to geoid and lifexp, respectively.\n\nHowever, take note that for the first few rows, the Tract ID column has 10 digits because it was imported as a numeric column. Census tract FIPS codes are 11 characters, so we will need to zero-pad it to 11 characters.\n\n\nusaleep_prelim |&gt; head()\n\n# A tibble: 6 × 7\n  `Tract ID` STATE2KX CNTY2KX TRACT2KX `e(0)` `se(e(0))` Abridged life table f…¹\n       &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;                   &lt;dbl&gt;\n1 1001020100        1       1    20100   73.1       2.23                       3\n2 1001020200        1       1    20200   76.9       3.35                       3\n3 1001020400        1       1    20400   75.4       1.02                       3\n4 1001020500        1       1    20500   79.4       1.18                       1\n5 1001020600        1       1    20600   73.1       1.55                       3\n6 1001020801        1       1    20801   78.3       2.39                       3\n# ℹ abbreviated name: ¹​`Abridged life table flag`\n\nusaleep &lt;- usaleep_prelim |&gt; \n  dplyr::select(GEOID = `Tract ID`,\n                lifexp = `e(0)`) |&gt; \n  dplyr::mutate(GEOID = GEOID |&gt; str_pad(11, pad = \"0\"))\n\nNext, let’s use the dplyr::left_join() function in order to perform a table join between the geographic tracts data and the life expectancy data.\n\nusaleep_mo2015_sf_unproj &lt;- tracts_mo2015_sf |&gt; \n  dplyr::left_join(usaleep, by = \"GEOID\") |&gt; \n  dplyr::select(GEOID, lifexp)\n\nUsing the sf::st_crs() function, we can see that the geographic coordinate system (GCS) for the life expectancy sf data is EPSG:4269. We can tell that the sf file is not projected because the description contains “GEOGCRS”.\n\nusaleep_mo2015_sf_unproj |&gt; sf::st_crs()\n\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n\n\nUse the sf::st_transform() function to change the projected coordinate system (PCS) of the life expectancy sf data to EPSG:2815, which is the PCS for Missouri East. Using the sf::st_crs() function, we can now see that the life expectancy sf data is projected because the description contains “PROJCRS”.\n\nusaleep_mo2015_sf &lt;- usaleep_mo2015_sf_unproj |&gt; \n  sf::st_transform(\"EPSG:2815\")\n\nusaleep_mo2015_sf |&gt; sf::st_crs()\n\nCoordinate Reference System:\n  User input: EPSG:2815 \n  wkt:\nPROJCRS[\"NAD83(HARN) / Missouri East\",\n    BASEGEOGCRS[\"NAD83(HARN)\",\n        DATUM[\"NAD83 (High Accuracy Reference Network)\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4152]],\n    CONVERSION[\"SPCS83 Missouri East zone (meters)\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",35.8333333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-90.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.999933333,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",250000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"United States (USA) - Missouri - counties of Bollinger; Butler; Cape Girardeau; Carter; Clark; Crawford; Dent; Dunklin; Franklin; Gasconade; Iron; Jefferson; Lewis; Lincoln; Madison; Marion; Mississippi; Montgomery; New Madrid; Oregon; Pemiscot; Perry; Pike; Ralls; Reynolds; Ripley; Scott; Shannon; St Charles; St Francois; St Louis; Ste. Genevieve; Stoddard; Warren; Washington; Wayne.\"],\n        BBOX[35.98,-91.97,40.61,-89.1]],\n    ID[\"EPSG\",2815]]\n\n\n\n\n2.4.4 Merging Data\nUse the dplyr::left_join() function in order to perform a table join for the geographic life expectancy data and the tabular ACS data.\n\nmo2015_sf &lt;- usaleep_mo2015_sf |&gt; \n  dplyr::left_join(acs_mo2015_df, by = \"GEOID\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#exporting-data",
    "href": "code/2-Introduction - Importing Cleaning Exporting Spatial Data.html#exporting-data",
    "title": "2  Introduction",
    "section": "2.5 Exporting Data",
    "text": "2.5 Exporting Data\nWe can export our merged data in a couple of different formats:\n\nShapefile: Use the sf::st_write() function to write the spatial data to a shapefile.\nParquet: Use the sf::arrow::st_write_parquet() function to write the spatial data to a parquet file.\n\n\nmo2015_sf |&gt; sf::st_write(\"data/mo2015_shp/mo2015_shp.shp\")\n\nWriting layer `mo2015' to data source \n  `data/mo2015_shp/mo2015_shp.shp' using driver `ESRI Shapefile'\nWriting 1393 features with 6 fields and geometry type Multi Polygon.\n\nmo2015_sf |&gt; sfarrow::st_write_parquet(\"data/mo2015_sf.parquet\")\n\nWarning: This is an initial implementation of Parquet/Feather file support and\ngeo metadata. This is tracking version 0.1.0 of the metadata\n(https://github.com/geopandas/geo-arrow-spec). This metadata\nspecification may change and does not yet make stability promises.  We\ndo not yet recommend using this in a production setting unless you are\nable to rewrite your Parquet/Feather files.\n\nusaleep_mo2015_sf_unproj |&gt; sfarrow::st_write_parquet(\"data/usaleep_mo2015_sf_unproj.parquet\")\n\nWarning: This is an initial implementation of Parquet/Feather file support and\ngeo metadata. This is tracking version 0.1.0 of the metadata\n(https://github.com/geopandas/geo-arrow-spec). This metadata\nspecification may change and does not yet make stability promises.  We\ndo not yet recommend using this in a production setting unless you are\nable to rewrite your Parquet/Feather files.\n\nacs_states_sf |&gt; sfarrow::st_write_parquet(\"data/acs_states_sf.parquet\")\n\nWarning: This is an initial implementation of Parquet/Feather file support and\ngeo metadata. This is tracking version 0.1.0 of the metadata\n(https://github.com/geopandas/geo-arrow-spec). This metadata\nspecification may change and does not yet make stability promises.  We\ndo not yet recommend using this in a production setting unless you are\nable to rewrite your Parquet/Feather files.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code/3-Mapping.html",
    "href": "code/3-Mapping.html",
    "title": "3  Mapping",
    "section": "",
    "text": "3.1 Load Packages\nIf you restarted R, you will need to load the packages for this workshop again.\nlibrary(pacman)\n\nWarning: package 'pacman' was built under R version 4.2.3\n\npacman::p_load(\n  # Spatial packages\n  tidycensus,\n  sf,\n  sfdep,\n  sfarrow,\n  ggspatial,\n  cartogram,\n  # Data importing, wrangling, and plotting packages\n  tidyverse,\n  usethis,\n  readr,\n  patchwork,\n  gganimate\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Mapping</span>"
    ]
  },
  {
    "objectID": "code/3-Mapping.html#importing-data",
    "href": "code/3-Mapping.html#importing-data",
    "title": "3  Mapping",
    "section": "3.2 Importing Data",
    "text": "3.2 Importing Data\nLet’s try importing the files that we exported earlier. Use the sf::arrow::st_read_parquet() function to read our exported parquet files as sf objects in R.\n\nusaleep_mo2015_sf &lt;- sfarrow::st_read_parquet(\"data/mo2015_sf.parquet\")\nusaleep_mo2015_sf_unproj &lt;- sfarrow::st_read_parquet(\"data/usaleep_mo2015_sf_unproj.parquet\")\nacs_states_sf &lt;- sfarrow::st_read_parquet(\"data/acs_states_sf.parquet\")\n\nState-level life expectancy data was previously obtained and cleaned from the CDC National Center for Health Statistics.\n\nUse the sf::st_read() function to read the shapefile as an sf object in R.\n\n\nlifexp_us_sf &lt;- sf::st_read(\"data/lifexp_us_shp/lifexp_us_shp.shp\")\n\nReading layer `lifexp_us_shp' from data source \n  `C:\\Users\\steph\\OneDrive - cumc.columbia.edu\\Phi\\04 TEACH\\Tutorials\\workshop-2024-iaphs-rspatial\\data\\lifexp_us_shp\\lifexp_us_shp.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 150 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3111747 ymin: -1697746 xmax: 2258200 ymax: 1565782\nProjected CRS: USA_Contiguous_Albers_Equal_Area_Conic",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Mapping</span>"
    ]
  },
  {
    "objectID": "code/3-Mapping.html#static-maps",
    "href": "code/3-Mapping.html#static-maps",
    "title": "3  Mapping",
    "section": "3.3 Static Maps",
    "text": "3.3 Static Maps\n\n3.3.1 Map Only Boundaries\nLet’s first create a static map of the Census tract boundaries of Missouri. Using the ggplot2 package, we can plot the spatial data using the geom_sf() function. We can add a title with the labs() function.\n\nplot_mo2015 &lt;- usaleep_mo2015_sf |&gt; \n  ggplot() + \n  geom_sf() +\n  labs(title = \"Projected\")\n\nplot_mo2015\n\n\n\n\n\n\n\n\n\n3.3.1.1 Combining Maps to Compare Projected and Unprojected Maps\nLet’s also plot our unprojected plot from earlier. Using syntax from the patchwork package, we can use the + operator to plot these two maps side by side.\n\nplot_mo2015_unproj &lt;- usaleep_mo2015_sf_unproj |&gt; \n  ggplot() + \n  geom_sf() +\n  labs(title = \"Unprojected\")\n\nplot_mo2015 + plot_mo2015_unproj\n\n\n\n\n\n\n\n\n\n\n3.3.1.2 Customizing Your Map\n\n3.3.1.2.1 … Changing map theme\nUse the theme_void() function to remove the background and axis marks.\n\nsmap_1 &lt;- plot_mo2015 +\n  theme_void()\n\nsmap_1\n\n\n\n\n\n\n\n\n\n\n3.3.1.2.2 … Changing Map Title\nUse the plot.title = element_text(hjust = 0.5, face = \"bold\") in the theme() function to center the title of the map.\n\nhjust = 0.5 allows you to center your title\nface = \"bold allows you to bold your title\n\n\nsmap_2 &lt;- smap_1 +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\nsmap_2\n\n\n\n\n\n\n\n\n\n\n3.3.1.2.3 … Adding in a north arrow\nUse the ggspatial::annotation_north_arrow() function to add in a north arrow to the map.\n\nThe location = tr argument is used to place the north arrow on the top right area of the map.\n\n\nsmap_3 &lt;- smap_2 +\n  ggspatial::annotation_north_arrow(location = 'tr')\n\nsmap_3\n\n\n\n\n\n\n\n\n\n\n3.3.1.2.4 … Adding in a scale bar\nUse the ggspatial::annotation_scale() to add in a scalebar to the map.\n\nThe unit_category = 'imperial' argument is used to change the units in the scale bar from metric to imperial units (showing miles instead of kilometers).\n\n\nsmap_4 &lt;- smap_3 +\n  ggspatial::annotation_scale(unit_category = 'imperial') \n\nsmap_4\n\n\n\n\n\n\n\n\n\n\n3.3.1.2.5 Putting it all together\nWe can create the map using the previous functions in one step.\n\nusaleep_mo2015_sf |&gt; \n  ggplot() + \n  geom_sf() +\n  theme_void() +\n  labs(title = \"Projected\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  ggspatial::annotation_north_arrow(location = 'tr') +\n  ggspatial::annotation_scale(unit_category = 'imperial') \n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Choropleth Maps\n\n3.3.2.1 Single Variable\nA choropleth map is a thematic map in which areas are shaded or patterned in proportion to the value of a variable being represented. This type of map is commonly used to visualize how a measurement varies across a geographic area, such as population density or median income.\n\n3.3.2.1.1 … Adding in a variable to create choropleth map\nIn ggplot::geom_sf(), use the fill argument in the aes() function to specify a variable that you would like to visualize In our example, we are visualizing the geographic distribution of those who have a percentage high school education.\n\nThe gray areas represent tracts with missing data.\n\n\nsmap_1 &lt;- usaleep_mo2015_sf |&gt; \n  ggplot() +\n  geom_sf(aes(fill = inc))\n\nsmap_1\n\n\n\n\n\n\n\n\n\n\n3.3.2.1.2 … Changing legend colors\nUse the low and high arguments in the scale_fill_continuous() to specify colors to use for low and high values on a continuous scale.\n\nsmap_2 &lt;- smap_1 + \n  scale_fill_continuous(low = 'white', high = 'blue')\n\nsmap_2\n\n\n\n\n\n\n\n\n\n\n\n3.3.2.2 Multiple Variables\n\n3.3.2.2.1 Prepare Long Dataset with Life Expectancy and Census Variables\nUse the tidyr::pivot_longer() function in order to create one column for the percent values for those with less than a high school education or who were foreign-born in our dataset.\n\nmo2015_sf_long &lt;- usaleep_mo2015_sf |&gt; \n  tidyr::pivot_longer(cols = c(pct_lths, pct_fb),\n                      names_to = 'variable_name',\n                      values_to = 'value') \n\nmo2015_sf_long |&gt; head()\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -59675.09 ymin: 120440.9 xmax: 93221.64 ymax: 349945.6\nProjected CRS: NAD83(HARN) / Missouri East\n# A tibble: 6 × 7\n  GEOID       lifexp   inc  gini                   geometry variable_name  value\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;MULTIPOLYGON [m]&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 29009960300   74.3 21530 0.379 (((-59495.77 125705.3, -5… pct_lths      0.283 \n2 29009960300   74.3 21530 0.379 (((-59495.77 125705.3, -5… pct_fb        0.140 \n3 29019001300   81.3    NA 0.577 (((84511.33 349945.6, 854… pct_lths      0.0794\n4 29019001300   81.3    NA 0.577 (((84511.33 349945.6, 854… pct_fb        0.167 \n5 29019002200   NA      NA 0.574 (((91011.64 346333.5, 910… pct_lths      0.0454\n6 29019002200   NA      NA 0.574 (((91011.64 346333.5, 910… pct_fb        0.0792\n\n\n\n\n3.3.2.2.2 Create a Facet Plot\nUse the facet_grid() function to create a facet plot for our variables.\n\nmultmap_1 &lt;- mo2015_sf_long |&gt; \n  ggplot() +\n  ggplot2::geom_sf() +\n  geom_sf(aes(fill = value)) +\n  facet_grid(~ variable_name)\n\nmultmap_1\n\n\n\n\n\n\n\n\n\n\n3.3.2.2.3 … Adding in Different legend colors, Theme, Title, North Arrow, and Scalebar\nUse the previous functions we reviewed to polish our map and add different legend colors, theme, a title, a north arrow, and a scalebar.\n\nUse the height and width arguments in the ggspatial::annotation_north_arrow() function in order to change the size of the north arrow and the style argument to change it to a different style\n\n\nmultmap_2 &lt;- multmap_1 +\n  scale_fill_continuous(low = 'white', high = 'blue') +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) +\n  labs(title = 'Missouri') +\n  ggspatial::annotation_north_arrow(location = 'tr', height = unit(0.5, \"cm\"), width = unit(0.5, \"cm\"),\n                                    style = north_arrow_orienteering(text_size = 1)) +\n  ggspatial::annotation_scale(unit_category = 'imperial')\n\nmultmap_2\n\n\n\n\n\n\n\n\n\n\n3.3.2.2.4 Putting it all together\nWe can create the map using the previous functions in one step.\n\nmultmap &lt;- mo2015_sf_long |&gt; \n  ggplot() +\n  ggplot2::geom_sf() +\n  geom_sf(aes(fill = value)) +\n  facet_wrap(vars(variable_name), ncol = 3) + \n  scale_fill_continuous(low = 'white', high = 'blue') + \n  theme_void() +\n  labs(title = 'CHD Prevalence and Educational Attainment in New York') +\n  ggspatial::annotation_north_arrow(location = 'tl', height = unit(0.5, \"cm\"), width = unit(0.5, \"cm\"),\n                                    style = north_arrow_orienteering(text_size = 1)) +\n  ggspatial::annotation_scale(unit_category = 'imperial')\n\nmultmap\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.3 Cartogram\nCartograms are maps where the geometry of the areas are changed to convey information. In this example, we are using the cartogram::cartogram_dorling() function to create a type of cartogram that are represented by circles. First we need to prep our data. We will weight by an exponentiated version of the Gini coefficient so we can have circles that are more different in size.\n\n# Life expectancy data\nlifexp_us_sf_2018 &lt;- lifexp_us_sf |&gt; \n  dplyr::filter(yr == 2018)\n\n# ACS data\nacs_states_sf_2018 &lt;- acs_states_sf |&gt; \n  dplyr::mutate(gini_exp = gini**15) |&gt; \n  dplyr::filter(yr == 2018)\n\nUse the cartogram::cartogram_dorling() function to create a type of cartogram that are represented by circles.\n\nThe k = 1 argument is used to create smaller circles so they can later fit onto the map.\n\n\nacs_dorling_2018 &lt;- acs_states_sf_2018 |&gt; \n  cartogram::cartogram_dorling(weight = \"gini_exp\", k = 1)\n\nWhen comparing the gini coefficient with life expectancy, we can first visualize the relationship with a scatterplot.\n\nacs_dorling_2018 |&gt; \n  dplyr::left_join(lifexp_us_sf_2018 |&gt; as_tibble(), by = \"state\") |&gt; \n  ggplot(aes(x = gini, y = lifexp)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWhen plotting the cartogram, the overall relationship is harder to discern but the cartogram allows us to see comparisons by state. This gives us some more information.\n\nWe see high income inquality and low life expectancy in the South.\nBut this relationship isn’t consistent. We also see high income inequality and high life expectancy in a state like California.\n\n\nggplot() +\n  geom_sf(data = lifexp_us_sf_2018, aes(fill = lifexp)) +\n  geom_sf(data = acs_dorling_2018, aes(alpha = gini, group = state), fill = \"red\") +\n  scale_fill_gradient(low = \"white\", high = \"forestgreen\") +\n  scale_alpha_continuous(range = c(0, 0.5))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Mapping</span>"
    ]
  },
  {
    "objectID": "code/3-Mapping.html#animated-maps",
    "href": "code/3-Mapping.html#animated-maps",
    "title": "3  Mapping",
    "section": "3.4 Animated Maps",
    "text": "3.4 Animated Maps\nAnimated maps are a great way to visualize changes over time. In this example, we will create an animated map that shows this relationship between life expectancy and the Gini coefficient over time.\n\nacs_dorling_2018 &lt;- acs_states_sf |&gt; \n  dplyr::mutate(gini_exp = gini**15) |&gt; \n  dplyr::filter(yr == 2018) |&gt;\n  cartogram::cartogram_dorling(weight = \"gini_exp\", k = 1)\n\nacs_dorling_2019 &lt;- acs_states_sf |&gt; \n  dplyr::mutate(gini_exp = gini**15) |&gt; \n  dplyr::filter(yr == 2019) |&gt; \n  cartogram::cartogram_dorling(weight = \"gini_exp\", k = 1)\n\nacs_dorling_2020 &lt;- acs_states_sf |&gt; \n  dplyr::mutate(gini_exp = gini**15) |&gt; \n  dplyr::filter(yr == 2020) |&gt; \n  cartogram::cartogram_dorling(weight = \"gini_exp\", k = 1)\n\n# Concatenate the rows\nacs_dorling &lt;- dplyr::bind_rows(\n  acs_dorling_2018,\n  acs_dorling_2019,\n  acs_dorling_2020)\n\n\n3.4.1 Plot Facets by Time\nOne way of visualizing differences across time is faceting by time.\n\nggplot() +\n  geom_sf(data = lifexp_us_sf, aes(fill = lifexp)) +\n  geom_sf(data = acs_dorling, aes(alpha = pct_lths, group = state), fill = \"red\") +\n  facet_grid(yr ~ .) \n\n\n\n\n\n\n\n\n\n\n3.4.2 Plot Animation by Time\nUse the gganimate::transition_manual() function to animate by yr.\n\nplot_anim &lt;- ggplot() +\n  geom_sf(data = lifexp_us_sf, aes(fill = lifexp)) +\n  geom_sf(data = acs_dorling, aes(alpha = pct_lths, group = state), fill = \"red\") +\n  gganimate::transition_manual(yr)\n\nplot_anim\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\n\n\nThe plot is pretty non-descript, so let’s add a title with the year. You can reference the years with {current_frame} in the title.\n\nplot_anim + \n  labs(title = \"Year: {current_frame}\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\n\n\nNow, let’s make this plot pretty with some of the functions we learned before.\n\nplot_anim + \n  labs(title = \"Year: {current_frame}\", fill = \"Life Expectancy\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"bottom\") +\n  scale_fill_gradient(low = \"white\", high = \"forestgreen\") +\n  scale_alpha_continuous(range = c(0, 0.5)) +\n  ggspatial::annotation_north_arrow(location = 'tl') +\n  ggspatial::annotation_scale(location = 'br', unit_category = 'imperial')\n\nnframes and fps adjusted to match transition",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Mapping</span>"
    ]
  },
  {
    "objectID": "code/4-Additional Resources.html",
    "href": "code/4-Additional Resources.html",
    "title": "4  Additional Resources",
    "section": "",
    "text": "In case you would like to learn more about geocomputation, the tidycensus package, or general data wrangling, here are some additional resources:\n\nGeocomputation with R (free online book)\nVignette for the tidycensus package\nR for Data Science (free online book)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Additional Resources</span>"
    ]
  }
]